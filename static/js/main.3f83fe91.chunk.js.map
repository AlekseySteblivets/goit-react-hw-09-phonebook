{"version":3,"sources":["redux/phonebooks/phonebooks-actions.js","components/UserMenu/Navigation.js","components/UserMenu/AuthNav.js","components/UserMenu/UserMenu.js","components/UserMenu/AppBar.js","components/PrivateRoute/PrivateRoute.js","components/PublicRoute/PublicRoute.js","App.js","redux/phonebooks/phonebooks-reducer.js","redux/phonebooks/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","isLoggedIn","useSelector","authSelectors","getIsAuthenticated","to","exact","style","activeStyle","AuthNav","container","alignItems","avatar","marginRight","name","UserMenu","dispatch","useDispatch","getUserName","onLogout","useCallback","authOperations","logout","src","alt","width","type","onClick","header","justifyContent","alingItems","borderBotton","AppBar","PrivateRoute","component","isAuthenticated","redirectTo","children","routeProps","PublicRoute","restricted","HomeView","lazy","RegisterView","LoginView","Contacts","App","useEffect","console","log","getCurrentUser","fallback","path","items","createReducer","_","payload","state","filter","contact","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","phonebooksReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","token","error","axios","defaults","baseURL","headers","common","Authorization","getState","a","persistedToken","get","response","data","massage","login","credentials","post","message","register"],"mappings":"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","file":"static/js/main.3f83fe91.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('phonebooks/fetchContactRequest');\nexport const fetchContactSuccess = createAction('phonebooks/fetchContactSuccess');\nexport const fetchContactError = createAction('phonebooks/fetchContactError');\n\n\n\nexport const addContactRequest = createAction('phonebooks/addContactRequest');\nexport const addContactSuccess = createAction('phonebooks/addContactSuccess');\nexport const addContactError = createAction('phonebooks/addContactError');\n\nexport const deleteContactRequest = createAction('phonebooks/deleteContactRequest');\nexport const deleteContactSuccess = createAction('phonebooks/deleteContactSuccess');\nexport const deleteContactError = createAction('phonebooks/deleteContactError');\n\n\nexport const changeFilter = createAction('phonebooks/changeFilter')\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { authSelectors } from '../../redux/auth';\n\nconst styles = {\n    link: {\n        display: 'inline-block',\n        textDecoration: 'none',\n        padding: 12,\n        fontWeight: 700,\n        color: '#2A363B',\n    },\n    activeLink: {\n        color: '#E84A5F',\n    },\n};\n\nexport default function Navigation() {\n\n    const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n    return (\n        <div>\n            <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}> Главная</NavLink>\n            {isLoggedIn && (\n                <NavLink to=\"/contacts\" style={styles.link} activeStyle={styles.activeLink}> Заметки\n                </NavLink>)}\n\n        </div>\n    )\n}\n\n// const mapStateToProps = state => ({\n//     isAuthenticated: authSelectors.getIsAuthenticated(state),\n// })\n// export default connect(mapStateToProps)(Navigation);","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst styles = {\n    link: {\n        display: 'inline-block',\n        textDecoration: 'none',\n        padding: 12,\n        fontWeight: 700,\n        color: '#2A363B',\n    },\n    activeLink: {\n        color: '#E84A5F',\n    },\n};\n\nconst AuthNav = () => (\n    <div>\n        <NavLink to=\"/register\" exact style={styles.link} activeStyle={styles.activeLink} > Регистрация</NavLink>\n        <NavLink to=\"/login\" style={styles.link} activeStyle={styles.activeLink}> Логин</NavLink>\n    </div>\n)\n\nexport default AuthNav;","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authSelectors, authOperations } from '../../redux/auth';\n\nconst styles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    avatar: {\n        marginRight: 4,\n    },\n    name: {\n        fontWeight: 700,\n        marginRight: 12,\n    },\n};\n\nexport default function UserMenu() {\n    const dispatch = useDispatch();\n    const name = useSelector(authSelectors.getUserName);\n    const onLogout = useCallback(() => { dispatch(authOperations.logout()); }, [dispatch]);\n\n    return (\n        <div style={styles.container}>\n            <img src=\"\" alt=\"\" width=\"32\" style={styles.avatar} />\n            <span style={styles.name}>Welcome, {name}</span>\n            <button type=\"button\" onClick={onLogout}>Выйти</button>\n        </div>\n    )\n}\n\n\n// const mapStateToProps = state => ({\n//     name: authSelectors.getUserName(state),\n//     // avatar:\n// });\n\n// const mapDispatchToProps = {\n//     onLogout: authOperations.logout,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Navigation from './Navigation';\nimport AuthNav from './AuthNav';\nimport UserMenu from './UserMenu';\nimport { authSelectors } from '../../redux/auth';\n\n\n\nconst styles = {\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alingItems: 'center',\n        borderBotton: '1px, solid #2A363B',\n    },\n}\n\nexport default function AppBar() {\n    const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n    return (\n        <header style={styles.header} >\n            <Navigation />\n            {isLoggedIn ? <UserMenu /> : <AuthNav />}\n        </header>\n    )\n}\n\n\n\n// const mapStateToProps = state => ({\n//     isAuthenticated: authSelectors.getIsAuthenticated(state),\n\n// });\n\n// export default connect(mapStateToProps)(AppBar);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { authSelectors } from '../../redux/auth';\n\nexport default function PrivateRoute({\n    component: Component,\n    isAuthenticated,\n    redirectTo,\n    children,\n    ...routeProps\n}) {\n    const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n    return (\n        <Route {...routeProps}>\n            {isLoggedIn ? children : <Redirect to={redirectTo} />}\n        </Route>\n    );\n};\n\n\n\n// const mapStateToProps = state => ({\n//     isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from '../../redux/auth';\n\n\n\nexport default function PublicRoute({\n    component: Component,\n    isAuthenticated,\n    redirectTo,\n    children,\n    ...routeProps\n}) {\n    const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n    return (\n        <Route {...routeProps}>\n            {isLoggedIn && routeProps.restricted ? (\n                <Redirect to={redirectTo} />\n            ) : (\n                children\n            )}\n        </Route>\n    );\n};\n\n\n\n{/* const mapStateToProps = state => ({\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute); */}\n","import React, { Suspense, lazy, useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { Switch } from \"react-router-dom\";\nimport AppBar from './components/UserMenu/AppBar';\nimport { authOperations } from './redux/auth';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute/PublicRoute';\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst Contacts = lazy(() => import('./views/Contacts'));\n\n\nexport default function App() {\n  // state = {\n  // }\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    console.log(dispatch);\n    dispatch(authOperations.getCurrentUser());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <AppBar />\n\n      <Suspense fallback={<p>Loading page...</p>}>\n        <Switch>\n          <PublicRoute exact path=\"/\">\n            <HomeView />\n          </PublicRoute>\n          <PublicRoute\n            path=\"/register\"\n            restricted\n            redirectTo=\"/contacts\">\n            <RegisterView />\n          </PublicRoute>\n          <PublicRoute\n            path=\"/login\"\n            restricted\n            redirectTo=\"/contacts\">\n            <LoginView />\n          </PublicRoute>\n          <PrivateRoute\n            path=\"/contacts\"\n            redirectTo=\"/login\">\n            <Contacts />\n          </PrivateRoute>\n        </Switch>\n      </Suspense>\n\n\n    </div>\n  )\n}\n\n\n\n\n// const mapDispatchToProps = {\n//   onGetCurrentUser: authOperations.getCurrentUser\n// }\n\n// export default connect(null, mapDispatchToProps)(App);","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    changeFilter,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n} from './phonebooks-actions';\n\n\n\nconst items = createReducer([], {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => [payload, ...state],\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact =>\n        contact.id !== payload),\n})\n\nconst loading = createReducer(false, {\n    [fetchContactRequest]: () => true,\n    [fetchContactSuccess]: () => false,\n    [fetchContactError]: () => false,\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n})\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n})\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from 'redux-logger';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER\n} from 'redux-persist';\nimport phonebooksReducer from \"./phonebooks-reducer\";\nimport { authReducer } from \"../auth\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n}),\n    // myMiddleware,\n    logger,\n];\n\nconst authPersistConfig = {\n    key: 'auth',\n    storage,\n    whitelist: ['token'],\n\n};\n\nconst store = configureStore({\n    reducer: {\n        auth: persistReducer(authPersistConfig, authReducer),\n        contacts: phonebooksReducer,\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport store from './redux/phonebooks/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nexport default {\n    registerRequest,\n    registerSuccess,\n    registerError,\n    loginRequest,\n    loginSuccess,\n    loginError,\n    logoutRequest,\n    logoutSuccess,\n    logoutError,\n    getCurrentUserRequest,\n    getCurrentUserSuccess,\n    getCurrentUserError,\n};","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport authActions from \"./auth-actions\";\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n    [authActions.registerSuccess]: (_, { payload }) => payload.user,\n    [authActions.loginSuccess]: (_, { payload }) => payload.user,\n    [authActions.logoutSuccess]: () => initialUserState,\n    [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n    [authActions.registerSuccess]: (_, { payload }) => payload.token,\n    [authActions.loginSuccess]: (_, { payload }) => payload.token,\n    [authActions.logoutSuccess]: () => null,\n});\n\nconst error = createReducer(null, {\n    [authActions.registerError]: (_, { payload }) => payload,\n    [authActions.loginError]: (_, { payload }) => payload,\n    [authActions.logoutError]: (_, { payload }) => payload,\n    [authActions.getCurrentUserError]: (_, { payload }) => payload,\n\n});\n\nconst isAuthenticated = createReducer(false, {\n    [authActions.registerSuccess]: () => true,\n    [authActions.loginSuccess]: () => true,\n    [authActions.getCurrentUserSuccess]: () => true,\n    [authActions.registerError]: () => false,\n    [authActions.loginError]: () => false,\n    [authActions.getCurrentUserError]: () => false,\n    [authActions.logoutSuccess]: () => false,\n})\n\nexport default combineReducers({\n    user,\n    isAuthenticated,\n    token,\n    error,\n});","import axios from \"axios\";\nimport authActions from \"./auth-actions\";\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n    set(token) {\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    },\n    unset() {\n        axios.defaults.headers.common.Authorization = '';\n    },\n};\n\nconst register = credentials => async dispatch => {\n    dispatch(authActions.registerRequest());\n    try {\n        const response = await axios.post('/users/signup', credentials);\n        token.set(response.data.token);\n        dispatch(authActions.registerSuccess(response.data))\n    } catch (error) {\n        dispatch(authActions.registerError(error.message));\n\n    }\n\n};\n\nconst login = credentials => async dispatch => {\n    dispatch(authActions.loginRequest());\n    try {\n        const response = await axios.post('/users/login', credentials);\n\n        token.set(response.data.token);\n        dispatch(authActions.loginSuccess(response.data))\n    } catch (error) {\n        dispatch(authActions.loginError(error.message));\n    }\n};\n\nconst logout = () => async dispatch => {\n    dispatch(authActions.logoutRequest());\n\n    try {\n        await axios.post('/users/logout');\n\n        token.unset();\n        dispatch(authActions.logoutSuccess());\n    } catch (error) {\n        dispatch(authActions.logoutError(error.message));\n    }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n    const {\n        auth: { token: persistedToken },\n    } = getState();\n\n    if (!persistedToken) {\n        return;\n    }\n    token.set(persistedToken);\n    dispatch(authActions.getCurrentUserRequest());\n    try {\n        const response = await axios.get('/users/current');\n        dispatch(authActions.getCurrentUserSuccess(response.data));\n    } catch (error) {\n        dispatch(authActions.getCurrentUserError(error.massage));\n    }\n};\n\nexport default { getCurrentUser, login, register, logout };","const getIsAuthenticated = state => state.auth.isAuthenticated;\nconst getUserName = state => state.auth.user.name;\n\n\nexport default { getIsAuthenticated, getUserName };\n"],"sourceRoot":""}